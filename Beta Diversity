#Install the packages, IF YOU NEED TO :)
install.packages("tidyverse")
install.packages("vegan")
install.packages("devtools")
library(devtools)
devtools::install_github("jbisanz/qiime2R")

#Load the packages. Everyone needs to do this.
library(tidyverse)
library(vegan)
if (!require("BiocManager", quietly = TRUE))
  install.packages("BiocManager")
BiocManager::install("rhdf5")
BiocManager::install("biomformat")
BiocManager::install("phyloseq")
library(Rhdf5lib)
library(qiime2R)


##############################################
#Set UP
#
#These are the things that  we need from Qiime:
#
#sample-metadata.tsv
#core-metrics-results/bray_curtis_pcoa_results.qza
#core-metrics-results/weighted_unifrac_pcoa_results.qza
#core-metrics-results/rarefied_table.qza
#rooted-tree.qza
#taxonomy.qza
#core-metrics-results/evenness_vector.qza
#core-metrics-results/faith_pd_vector.qza
#core-metrics-results/observed_otus_vector.qza
#core-metrics-results/shannon_vector.qza
#
# These files are already in the ANSC516-repo
##############################################

getwd()
setwd("~/ANSC 516/MyData/MovingPictures")

list.files()

if(!dir.exists("output"))
  dir.create("output")

#How to load a file into R
metadata <- read.csv("Walls_MetaData_2025.csv", header = TRUE, stringsAsFactors = FALSE)
write.table(metadata, file = "Walls_MetaData_2025.tsv", sep = "\t", row.names = FALSE, quote = FALSE)
metadata[1,]     #row,column
metadata[,1]
#When subsetting, the first number is the row and after the comma is the column
metadata <- metadata[-1,]

#Now the qiime2R method
str(metadata)
meta$Stag.Loc <- as.factor(meta$Stag.Loc)
levels(metadata$Stag.Loc)
metadata2<-metadata[str_detect(metadata$Stag.Loc, "Baseline|Weekly"),]
metadata3<-subset(metadata2, Location!="HE")
metadata4<-subset(metadata3, Location!="SE")
#Re-order the groups because the default is alphabetical order
meta$Stag.Loc = factor(meta$Stag.Loc, c("Baseline.A", "Weekly.A", "Baseline.B", "Weekly.B", "Baseline.C", "Weekly.C"))
levels(meta$Stag.Loc)

row.names(metadata4) <- metadata4[,1]
row.names(metadata4) <- metadata4$SampleID
#metadata <- metadata[,-1]
row.names(metadata4)

bc_PCoA<-read_qza("core-metrics-results/bray_curtis_pcoa_results.qza")
wUF <- read_qza("core-metrics-results/weighted_unifrac_pcoa_results.qza")
jaccard<-read_qza("core-metrics-results/jaccard_pcoa_results.qza")
uwUF <- read_qza("core-metrics-results/unweighted_unifrac_pcoa_results.qza")


stag_colors <- c("Black", "Blue", "Green", "Gray", "Red", "Purple")

bc_meta <- bc_PCoA$data$Vectors %>%
  select(SampleID, PC1, PC2, PC3) %>%
  inner_join(metadata4, by = c("SampleID" = "SampleID"))

# Now we are going to make an ordination plot
ggplot(bc_meta, aes(x=PC1, y=PC2, color=Stag.Loc)) +
  geom_point(aes(shape= Study)) + #alpha controls transparency and helps when points are overlapping
  theme_q2r() +
  xlab("PC1") +
  ylab("PC2") 
ggsave(paste0("output/BC-basic_", Stag.Loc,".png"), height=2, width=3, device="png") # save a 3 inches by 4 inches

# Now we are going to make our code a little more re-usable
stag_colors <- c("Black", "Blue", "Green", "Gray", "Red", "Purple")
my_column <- "Stag.Loc"
#my_column <- "DietTreatment"

ggplot(bc_meta, aes(x=PC1, y=PC2, color=get(my_column))) +
  geom_point() + #alpha controls transparency and helps when points are overlapping
  theme_q2r() +
  facet_grid(~Study) +
  xlab(paste0("PC1 (", round(100*bc_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*bc_PCoA$data$ProportionExplained[2], digits = 2), "%)")) +
  scale_color_manual(values=stag_colors, name = my_column)
ggsave(paste0("output/BC-basic_", my_column,".png"), height=2, width=3, device="png") # save a 3 inches by 4 inches

centroids <- aggregate(cbind(PC1,PC2)~get(my_column),bc_meta,mean)
colnames(centroids)[1] <- "Stag.Loc"

ggplot(bc_meta, aes(x=PC1, y=PC2, color=get(my_column))) +
  geom_point() + #alpha controls transparency and helps when points are overlapping
  geom_point(data=centroids, size = 3) +
  theme_q2r() +
  stat_ellipse(level = 0.95, type = "t") +
  xlab(paste0("PC1 (", round(100*bc_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*bc_PCoA$data$ProportionExplained[2], digits = 2), "%)")) +
  scale_color_manual(values=stag_colors, name = my_column)
ggsave(paste0("output/BC-ellipse_", my_column,".pdf"), height=3, width=4.5, device="pdf") # save a PDF 3 inches by 4 inches

ggplot(bc_meta, aes(x=PC1, y=PC2, color=get(my_column))) +
  geom_point(aes(shape= Study)) + #alpha controls transparency and helps when points are overlapping
  #geom_point(data=centroids, size = 3) +
  theme_q2r() +
  #stat_ellipse(level = 0.95, type = "t") +
  xlab(paste0("PC1 (", round(100*bc_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*bc_PCoA$data$ProportionExplained[2], digits = 2), "%)")) 
#scale_color_manual(values=body_colors, name = my_column)
ggsave(paste0("output/BC-ellipse_", my_column,"-subject.pdf"), height=3, width=4.5, device="pdf") # save a PDF 3 inches by 4 inches

##################################################################################
## SAME thing but with weighted UniFrac

Wuni_PCoA<-read_qza("core-metrics-results/weighted_unifrac_pcoa_results.qza")

Wuni_meta <- Wuni_PCoA$data$Vectors %>%
  select(SampleID, PC1, PC2) %>%
  inner_join(metadata4, by = c("SampleID" = "SampleID"))

centroids <- aggregate(cbind(PC1,PC2)~get(my_column),Wuni_meta,mean)

ggplot(Wuni_meta, aes(x=PC1, y=PC2, color=get(my_column))) +
  geom_point(aes(color = Stag.Loc, shape = Study)) + #alpha controls transparency and helps when points are overlapping
  #geom_point(data=centroids, size = 3) +
  theme_q2r() +
  stat_ellipse(level = 0.95, type = "t") +
  facet_grid(~Study) +
  xlab(paste0("PC1 (", round(100*Wuni_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*Wuni_PCoA$data$ProportionExplained[2], digits = 2), "%)"))
ggsave(paste0("output/Wuni-ellipse_", my_column,".png"), height=3, width=4.5, device="png") # save a 3 inches by 4 inches

ggplot(Wuni_meta, aes(x=PC1, y=PC2, color=get(my_column))) +
  geom_point(aes(shape= Study), size = 3) + #alpha controls transparency and helps when points are overlapping
  #geom_point(data=centroids, size = 3) +
  theme_q2r() +
  stat_ellipse(level = 0.95, type = "t") +
  xlab(paste0("PC1 (", round(100*Wuni_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*Wuni_PCoA$data$ProportionExplained[2], digits = 2), "%)")) +
  scale_color_manual(values=stag_colors, name = "Stag Location")
ggsave(paste0("output/Wuni-ellipse_", my_column,"-study.pdf"), height=3, width=4.5, device="pdf") # save a PDF 3 inches by 4 inches

##################################################################################
#Run some PERMANOVAs
#

bc_dist_mat<-read_qza("core-metrics-results/bray_curtis_distance_matrix.qza")
bc_dm <- as.matrix(bc_dist_mat$data) 
#I added the following code to convert values to be true
setdiff(rownames(bc_dm), metadata4$SampleID)  #Find missing IDs
setdiff(metadata4$SampleID, rownames(bc_dm))  #Find extra IDs

metadata4$SampleID <- as.character(metadata4$SampleID)
metadata4_sub <- metadata4[match(rownames(bc_dm), metadata4$SampleID), ]

all(rownames(bc_dm) == metadata4_sub$SampleID)

metadata4_sub <- metadata4_sub[!is.na(metadata4_sub$Stag.Loc), ]
bc_dm_clean <- bc_dm[metadata4_sub$SampleID, metadata4_sub$SampleID]
PERMANOVA_out <- adonis2(bc_dm_clean ~ Stag.Loc, data = metadata4_sub)

write.table(PERMANOVA_out,"output/Stag.Loc_Adonis_overall.csv",sep=",", row.names = TRUE) 

######################################################################################
##  Pairwise adonis function
##  we can also perform a pairwise comparison with the function 
##  Pairwise Adonis funtion by edro Martinez Arbizu & Sylvain Monteux
##  https://github.com/pmartinezarbizu/pairwiseAdonis/blob/master/pairwiseAdonis/R/pairwise.adonis.R
#######################################################################################

pairwise.adonis2 <- function(x, data, strata = NULL, nperm=999, ... ) {
  
  #describe parent call function 
  ststri <- ifelse(is.null(strata),'Null',strata)
  fostri <- as.character(x)
  #list to store results
  
  #copy model formula
  x1 <- x
  # extract left hand side of formula
  lhs <- x1[[2]]
  # extract factors on right hand side of formula 
  rhs <- x1[[3]]
  # create model.frame matrix  
  x1[[2]] <- NULL   
  rhs.frame <- model.frame(x1, data, drop.unused.levels = TRUE) 
  
  # create unique pairwise combination of factors 
  co <- combn(unique(as.character(rhs.frame[,1])),2)
  
  # create names vector   
  nameres <- c('parent_call')
  for (elem in 1:ncol(co)){
    nameres <- c(nameres,paste(co[1,elem],co[2,elem],sep='_vs_'))
  }
  #create results list  
  res <- vector(mode="list", length=length(nameres))
  names(res) <- nameres
  
  #add parent call to res 
  res['parent_call'] <- list(paste(fostri[2],fostri[1],fostri[3],', strata =',ststri, ', permutations',nperm ))
  
  
  #start iteration trough pairwise combination of factors  
  for(elem in 1:ncol(co)){
    
    #reduce model elements  
    if(inherits(eval(lhs),'dist')){	
      xred <- as.dist(as.matrix(eval(lhs))[rhs.frame[,1] %in% c(co[1,elem],co[2,elem]),
                                           rhs.frame[,1] %in% c(co[1,elem],co[2,elem])])
    }else{
      xred <- eval(lhs)[rhs.frame[,1] %in% c(co[1,elem],co[2,elem]),]
    }
    
    mdat1 <-  data[rhs.frame[,1] %in% c(co[1,elem],co[2,elem]),] 
    
    # redefine formula
    if(length(rhs) == 1){
      xnew <- as.formula(paste('xred',as.character(rhs),sep='~'))	
    }else{
      xnew <- as.formula(paste('xred' , 
                               paste(rhs[-1],collapse= as.character(rhs[1])),
                               sep='~'))}
    
    #pass new formula to adonis
    if(is.null(strata)){
      ad <- adonis2(xnew,data=mdat1, ... )
    }else{
      perm <- how(nperm = nperm)
      setBlocks(perm) <- with(mdat1, mdat1[,ststri])
      ad <- adonis2(xnew,data=mdat1,permutations = perm, ... )}
    
    res[nameres[elem+1]] <- list(ad[1:5])
  }
  #names(res) <- names  
  class(res) <- c("pwadstrata", "list")
  return(res)
} 

Stag.Loc_Pair <- pairwise.adonis2(bc_dm_clean ~ Stag.Loc, data = metadata4_sub)
write.table(Stag.Loc_Pair,"output/Stag.Loc_Adonis_pairwise.csv",sep=",", row.names = TRUE) 

##################################################################################
## Unweighted UniFrac

uWuni_PCoA<-read_qza("core-metrics-results/unweighted_unifrac_pcoa_results.qza")

uWuni_meta <- uWuni_PCoA$data$Vectors %>%
  select(SampleID, PC1, PC2) %>%
  inner_join(metadata4, by = c("SampleID" = "SampleID"))

centroids <- aggregate(cbind(PC1,PC2)~get(my_column),uWuni_meta,mean)

ggplot(uWuni_meta, aes(x=PC1, y=PC2, color=Stag.Loc)) +
  geom_point(aes(shape= Study)) + #alpha controls transparency and helps when points are overlapping
  #geom_point(data=centroids, size = 3) +
  theme_q2r() +
  facet_grid(~Study) +
  stat_ellipse(level = 0.95, type = "t") +
  xlab(paste0("PC1 (", round(100*uWuni_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*uWuni_PCoA$data$ProportionExplained[2], digits = 2), "%)")) 
ggsave(paste0("output/uWuni-ellipse_", my_column,".png"), height=3, width=4.5, device="png") # save a 3 inches by 4 inches

ggplot(uWuni_meta, aes(x=PC1, y=PC2, color=get(my_column))) +
  geom_point(aes(shape= Study), size = 3) + #alpha controls transparency and helps when points are overlapping
  #geom_point(data=centroids, size = 3) +
  theme_q2r() +
  stat_ellipse(level = 0.95, type = "t") +
  xlab(paste0("PC1 (", round(100*uWuni_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*uWuni_PCoA$data$ProportionExplained[2], digits = 2), "%)")) +
  scale_color_manual(values=stag_colors, name = "Stag Location")
ggsave(paste0("output/uWuni-ellipse_", my_column,"-study.pdf"), height=3, width=4.5, device="pdf") # save a PDF 3 inches by 4 inches
#########################################################################
#Jaccard
jaccard_PCoA<-read_qza("core-metrics-results/jaccard_pcoa_results.qza")

jaccard_meta <- jaccard_PCoA$data$Vectors %>%
  select(SampleID, PC1, PC2, PC3) %>%
  inner_join(metadata4, by = c("SampleID" = "SampleID"))

# Now we are going to make an ordination plot
ggplot(jaccard_meta, aes(x=PC1, y=PC2, color=Stag.Loc)) +
  geom_point() + #alpha controls transparency and helps when points are overlapping
  theme_q2r() +
  xlab("PC1 (32.27%)") +
  ylab("PC2 (22.28%)") +
  scale_color_manual(values=c("Black", "Blue", "Green", "Gray", "Red", "Purple"), name = "Stag-loc")

# Now we are going to make our code a little more re-usable
stag_colors <- c("Black", "Blue", "Green", "Gray", "Red", "Purple")
my_column <- "Stag.Loc"
#my_column <- "DietTreatment"

ggplot(jaccard_meta, aes(x=PC1, y=PC2, color=get(my_column))) +
  geom_point() + #alpha controls transparency and helps when points are overlapping
  theme_q2r() +
  facet_grid(~Study) +
  xlab(paste0("PC1 (", round(100*jaccard_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*jaccard_PCoA$data$ProportionExplained[2], digits = 2), "%)")) +
  scale_color_manual(values=stag_colors, name = my_column)
ggsave(paste0("output/jaccard-basic_", my_column,".tiff"), height=2, width=3, device="tiff") # save a PDF 3 inches by 4 inches

centroids <- aggregate(cbind(PC1,PC2)~get(my_column),jaccard_meta,mean)
colnames(centroids)[1] <- "Stag.Loc"

ggplot(jaccard_meta, aes(x=PC1, y=PC2, color=get(my_column))) +
  geom_point(aes(shape=Study)) + #alpha controls transparency and helps when points are overlapping
  geom_point(data=centroids, size = 3) +
  theme_q2r() +
  facet_grid(~Study) +
  stat_ellipse(level = 0.95, type = "t") +
  xlab(paste0("PC1 (", round(100*jaccard_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*jaccard_PCoA$data$ProportionExplained[2], digits = 2), "%)")) +
  scale_color_manual(values=stag_colors, name = my_column)
ggsave(paste0("output/jaccard-ellipse_", my_column,".pdf"), height=3, width=4.5, device="pdf") # save a PDF 3 inches by 4 inches

ggplot(jaccard_meta, aes(x=PC1, y=PC2, color=get(my_column))) +
  geom_point(aes(shape= Study)) + #alpha controls transparency and helps when points are overlapping
  #geom_point(data=centroids, size = 3) +
  theme_q2r() +
  #stat_ellipse(level = 0.95, type = "t") +
  xlab(paste0("PC1 (", round(100*jaccard_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*jaccard_PCoA$data$ProportionExplained[2], digits = 2), "%)")) 
#scale_color_manual(values=body_colors, name = my_column)
ggsave(paste0("output/jaccard-ellipse_", my_column,"-study.pdf"), height=3, width=4.5, device="pdf") # save a PDF 3 inches by 4 inches
